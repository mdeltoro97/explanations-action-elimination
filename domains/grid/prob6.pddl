(define (problem strips-grid-y-1)
   (:domain grid)
   (:objects node0-0 node0-1 node0-2 node1-0
             node1-1 node1-2 node2-0 node2-1 node2-2
             triangle diamond key0 key1 )
   (:init (arm-empty)
          (place node0-0)
          (place node0-1)
          (place node0-2)
          (place node1-0)
          (place node1-1)
          (place node1-2)
          (place node2-0)
          (place node2-1)
          (place node2-2)
          (shape triangle)
          (shape diamond)
          (conn node0-0 node1-0)
          (conn node0-0 node0-1)
          (conn node0-1 node1-1)
          (conn node0-1 node0-2)
          (conn node0-1 node0-0)
          (conn node0-2 node1-2)
          (conn node0-2 node0-1)
          (conn node1-0 node2-0)
          (conn node1-0 node0-0)
          (conn node1-0 node1-1)
          (conn node1-1 node2-1)
          (conn node1-1 node0-1)
          (conn node1-1 node1-2)
          (conn node1-1 node1-0)
          (conn node1-2 node2-2)
          (conn node1-2 node0-2)
          (conn node1-2 node1-1)
          (conn node2-0 node1-0)
          (conn node2-0 node2-1)
          (conn node2-1 node1-1)
          (conn node2-1 node2-2)
          (conn node2-1 node2-0)
          (conn node2-2 node1-2)
          (conn node2-2 node2-1)
          (locked node0-2)
          (lock-shape node0-2 triangle)
          (locked node2-0)
          (lock-shape node2-0 diamond)
          (locked node1-1)
          (lock-shape node1-1 diamond)
          (open node0-0)
          (open node0-1)
          (open node1-0)
          (open node1-2)
          (open node2-1)
          (open node2-2)
          (key key0)
          (key-shape key0 diamond)
          (at key0 node1-0)
          (key key1)
          (key-shape key1 triangle)
          (at key1 node0-1)
          (at-robot node0-0))
   (:goal (and (at key0 node2-2)
               (at key1 node1-2))))